steps:
  # Step 1: Clone the Java Spring Boot project from GitHub
  - name: 'gcr.io/cloud-builders/git'
    args:
      - 'clone'
      - '--branch=$BRANCH_NAME'
      - 'https://github.com/technical-stuff/spring3.git'
      - '/test3'
      
  - name: 'alpine'
    args:
      - 'sh'
      - '-c'
      - |
        ls -a
        pwd
        whoami
                
  - name: 'gcr.io/cloud-builders/mvn'
    args: ['install']
        
  #- name: 'gcr.io/cloud-builders/gradle'
  #  args: 
  #    - 'clean'
  #    - 'install'
  #    - '/test3'
  
    # Step 2: Run Maven clean install
  - name: 'gcr.io/cloud-builders/mvn'
    args:
      - '-f'
      - '/workspace/pom.xml'  # Adjust the path to your pom.xml file
      - 'clean'
      - 'install' 

  # Step 2: Build the Docker image
  - name: 'gcr.io/cloud-builders/docker'
    args:
      - 'build'
      - '-t'
      - 'us-east1-docker.pkg.dev/eastern-dream-404606/testing/$BRANCH_NAME:$BRANCH_NAME'
      - '.'

  # Step 3: Push the Docker image to Google Artifact Registry
  - name: 'gcr.io/cloud-builders/docker'
    args:
      - 'push'
      - 'us-east1-docker.pkg.dev/eastern-dream-404606/testing/$BRANCH_NAME:$BRANCH_NAME'

 - name: 'gcr.io/cloud-builders/gcloud'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        gcloud sql instances create instancetesting \
        --database-version=MYSQL_8_0 \
        --tier=db-n1-standard-1 \
        --region=us-east1 \
        --storage-type=SSD \
        --storage-size=10 \
        --root-password=Clops@456$$#22

      
  
  # Step to check if the MySQL database already exists
  - name: 'gcr.io/cloud-builders/gcloud'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        # Check if the database already exists
        if gcloud sql databases list --instance=test --project=$PROJECT_ID | grep -q $BRANCH_NAME-db; then
          echo "Database already exists. Skipping creation."
        else
          # Install pwgen
          apt update && apt install -y pwgen
          
          # Step 6: Create a MySQL database in Cloud SQL
          gcloud sql databases create $BRANCH_NAME-db --instance test --project $PROJECT_ID
          pwgen -1 12 >> $BRANCH_NAME.txt
          gcloud sql users create '$BRANCH_NAME-user' \
          --instance 'test' \
          --password '$(cat /workspace/$BRANCH_NAME.txt)'
        fi

  - name: 'gcr.io/cloud-builders/gcloud'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        # Get Cloud SQL instance information
        INSTANCE_INFO=$(gcloud sql instances describe 'test' --project '$PROJECT_ID' --format json)

        # Extract public IP address
        PUBLIC_IP=$(echo "${INSTANCE_INFO}" | jq -r '.ipAddresses[].ipAddress')

        # Extract private IP address
        PRIVATE_IP=$(echo "${INSTANCE_INFO}" | jq -r '.ipAddresses[] | select(.type=="PRIVATE") | .ipAddress')

        echo "Public IP: ${PUBLIC_IP}"
        echo "Private IP: ${PRIVATE_IP}"
    
  # Authenticate with Google Cloud and set project and region
  - name: 'gcr.io/cloud-builders/gcloud'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        gcloud config set project $PROJECT_ID
        gcloud config set compute/region us-east1

        # Get cluster credentials and set the context
        gcloud container clusters get-credentials autopilot-cluster-1 --region us-east1 --project $PROJECT_ID

        # Verify the namespaces
        kubectl config get-contexts

        # Get the list of namespaces
        kubectl get namespace
      
   # Print the contexts and namespaces to the Cloud Build logs
  - name: 'gcr.io/cloud-builders/gcloud'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        echo "Kubernetes Contexts:"
        kubectl config get-contexts  # Access the Kubernetes contexts

        echo "Namespaces:"
        kubectl get namespace  # Access the list of namespaces

  # Print the cluster info to the Cloud Build logs
  - name: 'gcr.io/cloud-builders/gcloud'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        echo "Cluster Info:"
        kubectl cluster-info  # Access the cluster info
        
  - name: 'gcr.io/cloud-builders/gcloud'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        ls -la /workspace # Verify the contents of the directory
        kubectl get namespaces  # Check if the namespace is listed after applying
        
  # Extract branch name from Cloud Build substitution
  - name: 'gcr.io/cloud-builders/gcloud'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        BRANCH_NAME=$(echo $BRANCH_NAME | tr / _ | tr "[:upper:]" "[:lower:]" | cut -c 1-63)
        sed -i "s|#_BRANCH_NAME#|$BRANCH_NAME|g" /workspace/namespace.yaml
        
  - name: 'gcr.io/cloud-builders/gcloud'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        kubectl apply -f /workspace/namespace.yaml
        kubectl get namespaces  # Check if the namespace is listed after applying
  
  - name: 'gcr.io/cloud-builders/gcloud'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        sed -i "s|#_BRANCH_NAME#|$BRANCH_NAME|g" /workspace/deployment.yaml
        kubectl apply -f /workspace/deployment.yaml
        kubectl get deploy ns $BRANCH_NAME  # Check if the namespace is listed after applying      
substitutions:
  _BRANCH_NAME: '$BRANCH_NAME'
  
images:
  - 'us-east1-docker.pkg.dev/eastern-dream-404606/testing/$BRANCH_NAME:$BRANCH_NAME'
options:
  logging: CLOUD_LOGGING_ONLY
