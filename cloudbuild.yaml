steps:
  # Step 1: Clone the Java Spring Boot project from GitHub
  - name: 'gcr.io/cloud-builders/git'
    args:
      - 'clone'
      - '--branch=$BRANCH_NAME'
      - 'https://github.com/technical-stuff/spring3.git'
      - '/test3'
      
  - name: 'alpine'
    args:
      - 'sh'
      - '-c'
      - |
        ls -a
        pwd
        whoami
        
  - name: 'gcr.io/cloud-builders/mvn'
    args: ['install']
        
  #- name: 'gcr.io/cloud-builders/gradle'
  #  args: 
  #    - 'clean'
  #    - 'install'
  #    - '/test3'
  
    # Step 2: Run Maven clean install
  - name: 'gcr.io/cloud-builders/mvn'
    args:
      - '-f'
      - '/workspace/pom.xml'  # Adjust the path to your pom.xml file
      - 'clean'
      - 'install'

  # Step 2: Build the Docker image
  - name: 'gcr.io/cloud-builders/docker'
    args:
      - 'build'
      - '-t'
      - 'us-east1-docker.pkg.dev/eastern-dream-404606/testing/$BRANCH_NAME:$BRANCH_NAME'
      - '.'

  # Step 3: Push the Docker image to Google Artifact Registry
  - name: 'gcr.io/cloud-builders/docker'
    args:
      - 'push'
      - 'us-east1-docker.pkg.dev/eastern-dream-404606/testing/$BRANCH_NAME:$BRANCH_NAME'

  # Authenticate with Google Cloud and set project and region
  - name: 'gcr.io/cloud-builders/gcloud'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        gcloud auth activate-service-account --key-file=$$GOOGLE_APPLICATION_CREDENTIALS
        gcloud config set project $PROJECT_ID
        gcloud config set compute/region us-east1

  # Get cluster credentials
  - name: 'gcr.io/cloud-builders/gcloud'
    args:
      - 'container'
      - 'clusters'
      - 'get-credentials'
      - 'autopilot-cluster-1'
      - '--region'
      - 'us-east1'
      - '--project'
      - 'eastern-dream-404606'
      
    # Verify the namespaces
  - name: 'gcr.io/cloud-builders/kubectl'
    args:
      - 'config'
      - 'get-contexts'
    id: get-contexts

  # Print the contexts to the Cloud Build logs
  - name: 'gcr.io/cloud-builders/gcloud'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        echo "Kubernetes Contexts:"
        echo $${_GET_CONTEXTS}  # Access the output variable
        
  # Get cluster info for debugging
  - name: 'gcr.io/cloud-builders/kubectl'
    args:
      - 'cluster-info'

  # Print the cluster info to the Cloud Build logs
  - name: 'gcr.io/cloud-builders/gcloud'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        echo "Cluster Info:"
        echo $${_CLUSTER_INFO}  # Access the output variabl
      
  # Verify the namespaces
  - name: 'gcr.io/cloud-builders/kubectl'
    args:
      - 'get'
      - 'namespace'
      - '--output=json'  # Get output in JSON format
    id: get-namespaces

  # Print the namespaces to the Cloud Build logs
  - name: 'gcr.io/cloud-builders/gcloud'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        echo "Namespaces:"
        echo $${_GET_NAMESPACES}  # Access the output variable

  # Get the list of namespaces using 'kubectl get namespace'
  - name: 'gcr.io/cloud-builders/kubectl'
    args:
      - 'get'
      - 'namespace'
    id: get-namespace-list

  # Print the list of namespaces to the Cloud Build logs
  - name: 'gcr.io/cloud-builders/gcloud'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        echo "Namespace List:"
        echo $${_GET_NAMESPACE_LIST}  # Access the output variable
images:
  - 'us-east1-docker.pkg.dev/eastern-dream-404606/testing/$BRANCH_NAME:$BRANCH_NAME'
options:
  logging: CLOUD_LOGGING_ONLY
